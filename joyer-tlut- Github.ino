
//bibliotecas
#include <Tone.h>
#include <U8glib.h>
#include <time.h>
//defini√ßoes de variaveis, musicas e imagens





int tempo1,tempo2,comida, brincar,dormir,bt1,bt2,bt3,i, j=0 ;
     



U8GLIB_ST7920_128X64_1X u8g( 8,  //E
                             7,  //R/W
                             6,  //RS
                             9); //RST


// --- Imagens do Jogo ---
const uint8_t bateriacheia_bitmap[] U8G_PROGMEM = {
0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x33
};
const uint8_t bateriamenos1_bitmap[] U8G_PROGMEM = {
0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x21, 0x21, 0x33 
};

const uint8_t bateriamenos2_bitmap[] U8G_PROGMEM = {
0x00, 0x08, 0x14, 0x78, 0x7e, 0x7a, 0x3c, 0x10, 0x00
  };
const uint8_t bateriamenos3_bitmap[] U8G_PROGMEM = {
0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x33 
};

  
const uint8_t bateriamenos4_bitmap[] U8G_PROGMEM = {
0x00, 0x08, 0x14, 0x78, 0x7e, 0x7a, 0x3c, 0x10, 0x00
  };
const uint8_t bateriadescarregada_bitmap[] U8G_PROGMEM = {
0x3f, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x33 
};


const uint8_t asteroide1_bitmap[] U8G_PROGMEM = {
0x00, 0x08, 0x14, 0x78, 0x7e, 0x7a, 0x3c, 0x10, 0x00
  };

  const uint8_t  asteroide2_bitmap[] U8G_PROGMEM ={
0x00, 0x08, 0x14, 0x78, 0x7e, 0x7a, 0x3c, 0x10, 0x00     
    
    
    };

const uint8_t  asteroide3_bitmap[] U8G_PROGMEM ={
0x00, 0x08, 0x14, 0x78, 0x7e, 0x7a, 0x3c, 0x10, 0x00     
    
    
    };

const uint8_t  asteroide4_bitmap[] U8G_PROGMEM ={
0x00, 0x08, 0x14, 0x78, 0x7e, 0x7a, 0x3c, 0x10, 0x00     
    
    
    };

const uint8_t nave_bitmap[] U8G_PROGMEM ={
  0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x28, 0x00, 0x6c, 0x00, 0x2c, 0x00,
   0x2c, 0x01, 0x2c, 0x00, 0x2c, 0x00, 0x2c, 0x01, 0x2c, 0x00, 0x6c, 0x00,
   0x28, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00
};

const uint8_t charmander_bitmap[] U8G_PROGMEM = {
  
0x00, 0xf0, 0x01, 0x00, 0x00, 0xf8, 0x01, 0x00, 0x00, 0x38, 0x07, 0x00,
   0x00, 0x18, 0x0e, 0x00, 0x00, 0xcf, 0x1f, 0x00, 0x80, 0xc5, 0x1f, 0x00,
   0xc0, 0xe7, 0x06, 0x00, 0xe0, 0xca, 0x05, 0x00, 0xe0, 0xcb, 0x07, 0x00,
   0xe0, 0xf9, 0x03, 0x00, 0xf0, 0x60, 0x00, 0x00, 0xf0, 0x60, 0x00, 0x00,
   0xf0, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0xfa, 0x00, 0x00, 0x00,
   0x7b, 0x60, 0x00, 0x00, 0x7f, 0xe0, 0x00, 0x00, 0x7f, 0xe0, 0x00, 0x00,
   0xff, 0xf0, 0x00, 0x00, 0xc3, 0x70, 0x00, 0x00, 0x83, 0xf1, 0x00, 0x00,
   0x03, 0xf3, 0x00, 0x00, 0x03, 0x96, 0x00, 0x00, 0x01, 0x94, 0x00, 0x00,
   0x03, 0x9c, 0x00, 0x00, 0x06, 0x98, 0x00, 0x00, 0x0c, 0x98, 0x01, 0x00,
   0x08, 0x10, 0x01, 0x00, 0x98, 0x17, 0xf9, 0x00, 0xb8, 0x1c, 0xcd, 0x01,
   0x68, 0x3c, 0xd7, 0x03, 0x08, 0x30, 0xfb, 0x07, 0x10, 0x20, 0xf8, 0x0f,
   0x10, 0x60, 0xec, 0x1b, 0x10, 0x40, 0xec, 0x12, 0x10, 0xc0, 0xee, 0x13,
   0x10, 0x80, 0x0e, 0x12, 0x10, 0x80, 0x0f, 0x13, 0x18, 0x80, 0x0f, 0x00,
   0x38, 0x80, 0x0f, 0x00, 0x2c, 0x80, 0x0f, 0x00, 0x2c, 0x80, 0x0f, 0x00,
   0x24, 0x40, 0x0e, 0x00, 0x64, 0xe0, 0x07, 0x10, 0xc6, 0x70, 0x07, 0x10,
   0x86, 0xbf, 0x0f, 0x10, 0x02, 0x91, 0x0e, 0x10, 0x86, 0x91, 0x0e, 0x18,
   0x8e, 0x90, 0x0e, 0x0b, 0x8e, 0x90, 0xee, 0x0c, 0x7f, 0xd0, 0xec, 0x07,
   0x3e, 0x50, 0xec, 0x03, 0x07, 0x50, 0xfc, 0x01, 0x06, 0x50, 0x00, 0x00,
   0x02, 0x70, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00,
   0x00, 0x60, 0x00, 0x00 


   }; 
 const uint8_t charmanderVirada_bitmap[] U8G_PROGMEM = {
    
0x00, 0x60, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00,
   0x02, 0x70, 0x00, 0x00, 0x06, 0x50, 0x00, 0x00, 0x07, 0x50, 0xfc, 0x01,
   0x3e, 0x50, 0xec, 0x03, 0x7f, 0xd0, 0xec, 0x07, 0x8e, 0x90, 0xee, 0x0c,
   0x8e, 0x90, 0x0e, 0x0b, 0x86, 0x91, 0x0e, 0x18, 0x02, 0x91, 0x0e, 0x10,
   0x86, 0xbf, 0x0f, 0x10, 0xc6, 0x70, 0x07, 0x10, 0x64, 0xe0, 0x07, 0x10,
   0x24, 0x40, 0x0e, 0x00, 0x2c, 0x80, 0x0f, 0x00, 0x2c, 0x80, 0x0f, 0x00,
   0x38, 0x80, 0x0f, 0x00, 0x18, 0x80, 0x0f, 0x00, 0x10, 0x80, 0x0f, 0x13,
   0x10, 0x80, 0x0e, 0x12, 0x10, 0xc0, 0xee, 0x13, 0x10, 0x40, 0xec, 0x12,
   0x10, 0x60, 0xec, 0x1b, 0x10, 0x20, 0xf8, 0x0f, 0x08, 0x30, 0xfb, 0x07,
   0x68, 0x3c, 0xd7, 0x03, 0xb8, 0x1c, 0xcd, 0x01, 0x98, 0x17, 0xf9, 0x00,
   0x08, 0x10, 0x01, 0x00, 0x0c, 0x98, 0x01, 0x00, 0x06, 0x98, 0x00, 0x00,
   0x03, 0x9c, 0x00, 0x00, 0x01, 0x94, 0x00, 0x00, 0x03, 0x96, 0x00, 0x00,
   0x03, 0xf3, 0x00, 0x00, 0x83, 0xf1, 0x00, 0x00, 0xc3, 0x70, 0x00, 0x00,
   0xff, 0xf0, 0x00, 0x00, 0x7f, 0xe0, 0x00, 0x00, 0x7f, 0xe0, 0x00, 0x00,
   0x7b, 0x60, 0x00, 0x00, 0xfa, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00,
   0xf0, 0x00, 0x00, 0x00, 0xf0, 0x60, 0x00, 0x00, 0xf0, 0x60, 0x00, 0x00,
   0xe0, 0xf9, 0x03, 0x00, 0xe0, 0xcb, 0x07, 0x00, 0xe0, 0xca, 0x05, 0x00,
   0xc0, 0xe7, 0x06, 0x00, 0x80, 0xc5, 0x1f, 0x00, 0x00, 0xcf, 0x1f, 0x00,
   0x00, 0x18, 0x0e, 0x00, 0x00, 0x38, 0x07, 0x00, 0x00, 0xf8, 0x01, 0x00,
   0x00, 0xf0, 0x01, 0x00 
   
   };
   
const uint8_t bubassauro_bitmap[] U8G_PROGMEM = {
  
0x00, 0xc0, 0x03, 0x00, 0x00, 0xe0, 0x07, 0x00, 0x00, 0xf0, 0x07, 0x00,
   0x00, 0xf0, 0x0f, 0x00, 0xf0, 0xf9, 0x1f, 0x00, 0x04, 0xfa, 0x7f, 0x00,
   0x80, 0xf9, 0xff, 0x00, 0xc2, 0xfd, 0xff, 0x07, 0xc0, 0xf9, 0xff, 0x07,
   0xc0, 0xf9, 0xff, 0x07, 0xc2, 0xf1, 0xff, 0x07, 0x80, 0xe1, 0xff, 0x07,
   0x00, 0xf0, 0xff, 0x07, 0x02, 0xf0, 0xff, 0x1f, 0x04, 0xf8, 0xff, 0x1f,
   0xfa, 0xf9, 0xff, 0x0f, 0x04, 0xfa, 0xff, 0x0f, 0x02, 0xf8, 0xff, 0x07,
   0x60, 0xf0, 0xff, 0x07, 0xe2, 0x60, 0xff, 0x07, 0xf3, 0x40, 0xff, 0x07,
   0xf1, 0x00, 0xfe, 0x07, 0xf2, 0x00, 0xfe, 0x07, 0x01, 0x00, 0xf8, 0x07,
   0x01, 0x00, 0xc0, 0x07, 0x03, 0x00, 0x80, 0x07, 0x04, 0x00, 0x80, 0x07,
   0x0c, 0x00, 0x80, 0x07, 0xf0, 0x62, 0x80, 0x07, 0x02, 0x00, 0xc1, 0x03,
   0x06, 0x00, 0xc0, 0x03, 0x00, 0xf0, 0xc3, 0x03, 0x02, 0xf0, 0xc1, 0x03,
   0x02, 0x35, 0xc2, 0x03, 0x00, 0x75, 0xc1, 0x03, 0x04, 0xf5, 0x85, 0x01,
   0x08, 0xf5, 0x80, 0x01, 0x00, 0x65, 0x80, 0x01, 0x10, 0x05, 0x80, 0x00,
   0x10, 0x01, 0x06, 0x00, 0x00, 0x01, 0x0a, 0x00, 0x00, 0x01, 0x08, 0x00,
   0x10, 0x01, 0x18, 0x00, 0x24, 0x01, 0x18, 0x00, 0x04, 0x09, 0x18, 0x00,
   0x02, 0x80, 0x79, 0x00, 0x02, 0x80, 0xfb, 0x00, 0x00, 0x84, 0xe3, 0x00,
   0x02, 0x86, 0x01, 0x00, 0x00, 0x06, 0x00, 0x00, 0x32, 0x00, 0x06, 0x00,
   0x72, 0xc0, 0x81, 0x00, 0x74, 0x62, 0x52, 0x00, 0x86, 0xec, 0x19, 0x00,
   0x38, 0x84, 0x02, 0x00, 0x04, 0xd8, 0x03, 0x00, 0x00, 0x08, 0x01, 0x00,
   0x00, 0x70, 0x00, 0x00


   }; 
    const uint8_t bubassauroVirada_bitmap[] U8G_PROGMEM = {
    
0x00, 0x70, 0x00, 0x00, 0x00, 0x08, 0x01, 0x00, 0x04, 0xd8, 0x03, 0x00,
   0x38, 0x84, 0x02, 0x00, 0x86, 0xec, 0x19, 0x00, 0x74, 0x62, 0x52, 0x00,
   0x72, 0xc0, 0x81, 0x00, 0x32, 0x00, 0x06, 0x00, 0x00, 0x06, 0x00, 0x00,
   0x02, 0x86, 0x01, 0x00, 0x00, 0x84, 0xe3, 0x00, 0x02, 0x80, 0xfb, 0x00,
   0x02, 0x80, 0x79, 0x00, 0x04, 0x09, 0x18, 0x00, 0x24, 0x01, 0x18, 0x00,
   0x10, 0x01, 0x18, 0x00, 0x00, 0x01, 0x08, 0x00, 0x00, 0x01, 0x0a, 0x00,
   0x10, 0x01, 0x06, 0x00, 0x10, 0x05, 0x80, 0x00, 0x00, 0x65, 0x80, 0x01,
   0x08, 0xf5, 0x80, 0x01, 0x04, 0xf5, 0x85, 0x01, 0x00, 0x75, 0xc1, 0x03,
   0x02, 0x35, 0xc2, 0x03, 0x02, 0xf0, 0xc1, 0x03, 0x00, 0xf0, 0xc3, 0x03,
   0x06, 0x00, 0xc0, 0x03, 0x02, 0x00, 0xc1, 0x03, 0xf0, 0x62, 0x80, 0x07,
   0x0c, 0x00, 0x80, 0x07, 0x04, 0x00, 0x80, 0x07, 0x03, 0x00, 0x80, 0x07,
   0x01, 0x00, 0xc0, 0x07, 0x01, 0x00, 0xf8, 0x07, 0xf2, 0x00, 0xfe, 0x07,
   0xf1, 0x00, 0xfe, 0x07, 0xf3, 0x40, 0xff, 0x07, 0xe2, 0x60, 0xff, 0x07,
   0x60, 0xf0, 0xff, 0x07, 0x02, 0xf8, 0xff, 0x07, 0x04, 0xfa, 0xff, 0x0f,
   0xfa, 0xf9, 0xff, 0x0f, 0x04, 0xf8, 0xff, 0x1f, 0x02, 0xf0, 0xff, 0x1f,
   0x00, 0xf0, 0xff, 0x07, 0x80, 0xe1, 0xff, 0x07, 0xc2, 0xf1, 0xff, 0x07,
   0xc0, 0xf9, 0xff, 0x07, 0xc0, 0xf9, 0xff, 0x07, 0xc2, 0xfd, 0xff, 0x07,
   0x80, 0xf9, 0xff, 0x00, 0x04, 0xfa, 0x7f, 0x00, 0xf0, 0xf9, 0x1f, 0x00,
   0x00, 0xf0, 0x0f, 0x00, 0x00, 0xf0, 0x07, 0x00, 0x00, 0xe0, 0x07, 0x00,
   0x00, 0xc0, 0x03, 0x00 
   
   };

   const uint8_t eve_bitmap[] U8G_PROGMEM = {

  0x00, 0x00, 0x03, 0x00, 0x00, 0xe0, 0x07, 0x00, 0x00, 0xe0, 0x7f, 0x00,
   0x00, 0xe0, 0xfc, 0x01, 0x00, 0xe0, 0xfa, 0x02, 0x00, 0xe0, 0xfe, 0x06,
   0x00, 0xe0, 0xf5, 0x06, 0x00, 0xe0, 0xf1, 0x0e, 0x00, 0x60, 0xff, 0x1e,
   0x03, 0x60, 0xdf, 0x1f, 0x03, 0xf0, 0x1e, 0x02, 0x03, 0xfe, 0x1e, 0x00,
   0x87, 0x7f, 0x1e, 0x00, 0xcf, 0xff, 0x1e, 0x00, 0xef, 0xff, 0x1f, 0x00,
   0xfe, 0xff, 0x0f, 0x00, 0xfe, 0xff, 0x0f, 0x00, 0xfe, 0xff, 0x1f, 0x00,
   0xfc, 0xff, 0x1f, 0x00, 0xd8, 0xff, 0x3b, 0x00, 0x90, 0xff, 0x79, 0x00,
   0xa0, 0x7f, 0x78, 0x00, 0x60, 0x7f, 0x78, 0x00, 0x00, 0x3f, 0x78, 0x00,
   0xc0, 0x3f, 0x70, 0x00, 0x84, 0x3f, 0x70, 0x01, 0x04, 0x3f, 0x30, 0x01,
   0x84, 0x1f, 0x20, 0x01, 0x84, 0x1f, 0xa0, 0x01, 0xcc, 0x1f, 0xe0, 0x01,
   0xdc, 0x3f, 0xc0, 0x01, 0xfc, 0x3f, 0xc0, 0x03, 0xf8, 0x3f, 0x80, 0x03,
   0xf8, 0x3f, 0x80, 0x03, 0xf0, 0x3f, 0x00, 0x03, 0xf0, 0x3f, 0x00, 0x02,
   0xc0, 0x3f, 0x00, 0x00, 0xc0, 0x3f, 0x00, 0x00, 0xc0, 0x1f, 0x00, 0x00,
   0xe0, 0x3f, 0x00, 0x00, 0xe0, 0x7f, 0x00, 0x00, 0xe0, 0xef, 0x00, 0x00,
   0xe0, 0xef, 0x01, 0x00, 0xe0, 0xe7, 0x01, 0x00, 0xf2, 0xe7, 0x03, 0x00,
   0xf2, 0xc3, 0x07, 0x00, 0xfa, 0xc1, 0x07, 0x00, 0x7e, 0xc0, 0x07, 0x00,
   0x3e, 0x80, 0x07, 0x00, 0x3e, 0x80, 0x13, 0x00, 0x0e, 0x00, 0x13, 0x00,
   0x06, 0x00, 0x19, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x00, 0x00, 0x3e, 0x00,
   0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x60, 0x00,
   0x00, 0x00, 0x40, 0x00 




   };   

   const uint8_t eveVirada_bitmap[] U8G_PROGMEM = {
    
  0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x78, 0x00,
   0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x3a, 0x00,
   0x06, 0x00, 0x19, 0x00, 0x0e, 0x00, 0x13, 0x00, 0x3e, 0x80, 0x13, 0x00,
   0x3e, 0x80, 0x07, 0x00, 0x7e, 0xc0, 0x07, 0x00, 0xfa, 0xc1, 0x07, 0x00,
   0xf2, 0xc3, 0x07, 0x00, 0xf2, 0xe7, 0x03, 0x00, 0xe0, 0xe7, 0x01, 0x00,
   0xe0, 0xef, 0x01, 0x00, 0xe0, 0xef, 0x00, 0x00, 0xe0, 0x7f, 0x00, 0x00,
   0xe0, 0x3f, 0x00, 0x00, 0xc0, 0x1f, 0x00, 0x00, 0xc0, 0x3f, 0x00, 0x00,
   0xc0, 0x3f, 0x00, 0x00, 0xf0, 0x3f, 0x00, 0x02, 0xf0, 0x3f, 0x00, 0x03,
   0xf8, 0x3f, 0x80, 0x03, 0xf8, 0x3f, 0x80, 0x03, 0xfc, 0x3f, 0xc0, 0x03,
   0xdc, 0x3f, 0xc0, 0x01, 0xcc, 0x1f, 0xe0, 0x01, 0x84, 0x1f, 0xa0, 0x01,
   0x84, 0x1f, 0x20, 0x01, 0x04, 0x3f, 0x30, 0x01, 0x84, 0x3f, 0x70, 0x01,
   0xc0, 0x3f, 0x70, 0x00, 0x00, 0x3f, 0x78, 0x00, 0x60, 0x7f, 0x78, 0x00,
   0xa0, 0x7f, 0x78, 0x00, 0x90, 0xff, 0x79, 0x00, 0xd8, 0xff, 0x3b, 0x00,
   0xfc, 0xff, 0x1f, 0x00, 0xfe, 0xff, 0x1f, 0x00, 0xfe, 0xff, 0x0f, 0x00,
   0xfe, 0xff, 0x0f, 0x00, 0xef, 0xff, 0x1f, 0x00, 0xcf, 0xff, 0x1e, 0x00,
   0x87, 0x7f, 0x1e, 0x00, 0x03, 0xfe, 0x1e, 0x00, 0x03, 0xf0, 0x1e, 0x02,
   0x03, 0x60, 0xdf, 0x1f, 0x00, 0x60, 0xff, 0x1e, 0x00, 0xe0, 0xf1, 0x0e,
   0x00, 0xe0, 0xf5, 0x06, 0x00, 0xe0, 0xfe, 0x06, 0x00, 0xe0, 0xfa, 0x02,
   0x00, 0xe0, 0xfc, 0x01, 0x00, 0xe0, 0x7f, 0x00, 0x00, 0xe0, 0x07, 0x00,
   0x00, 0x00, 0x03, 0x00 

   
   };
   const uint8_t charmanderp_bitmap[] U8G_PROGMEM = {
0x00, 0x60, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00,
   0x02, 0x70, 0x00, 0x00, 0x06, 0x50, 0x00, 0x00, 0x07, 0x50, 0xfc, 0x01,
   0x3e, 0x50, 0xec, 0x03, 0x7f, 0xd0, 0xec, 0x07, 0x8e, 0x90, 0xee, 0x0c,
   0x8e, 0x90, 0x0e, 0x0b, 0x86, 0x91, 0x0e, 0x18, 0x02, 0x91, 0x0e, 0x10,
   0x86, 0xbf, 0x0f, 0x10, 0xc6, 0x70, 0x07, 0x10, 0x64, 0xe0, 0x07, 0x10,
   0x24, 0x40, 0x0e, 0x00, 0x2c, 0x80, 0x0f, 0x00, 0x2c, 0x80, 0x0f, 0x00,
   0x38, 0x80, 0x0f, 0x00, 0x18, 0x80, 0x0f, 0x00, 0x10, 0x80, 0x0f, 0x13,
   0x10, 0x80, 0x0e, 0x12, 0x10, 0xc0, 0xee, 0x13, 0x10, 0x40, 0xec, 0x12,
   0x10, 0x60, 0xec, 0x1b, 0x10, 0x20, 0xf8, 0x0f, 0x08, 0x30, 0xfb, 0x07,
   0x68, 0x3c, 0xd7, 0x03, 0xb8, 0x1c, 0xcd, 0x01, 0x98, 0x17, 0xf9, 0x00,
   0x08, 0x10, 0x01, 0x00, 0x0c, 0x98, 0x01, 0x00, 0x06, 0x98, 0x00, 0x00,
   0x03, 0x9c, 0x00, 0x00, 0x01, 0x94, 0x00, 0x00, 0x03, 0x96, 0x00, 0x00,
   0x03, 0xf3, 0x00, 0x00, 0x83, 0xf1, 0x00, 0x00, 0xc3, 0x70, 0x00, 0x00,
   0xff, 0xf0, 0x00, 0x00, 0x7f, 0xe0, 0x00, 0x00, 0x7f, 0xe0, 0x00, 0x00,
   0x7b, 0x60, 0x00, 0x00, 0xfa, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00,
   0xf0, 0x00, 0x00, 0x00, 0xf0, 0x60, 0x00, 0x00, 0xf0, 0x60, 0x00, 0x00,
   0xe0, 0xf9, 0x03, 0x00, 0xe0, 0xcb, 0x07, 0x00, 0xe0, 0xca, 0x05, 0x00,
   0xc0, 0xe7, 0x06, 0x00, 0x80, 0xc5, 0x1f, 0x00, 0x00, 0xcf, 0x1f, 0x00,
   0x00, 0x18, 0x0e, 0x00, 0x00, 0x38, 0x07, 0x00, 0x00, 0xf8, 0x01, 0x00,
   0x00, 0xf0, 0x01, 0x00 

  };

  const uint8_t bubassaurop_bitmap[] U8G_PROGMEM ={
0x00, 0xc0, 0x03, 0x00, 0x00, 0xe0, 0x07, 0x00, 0x00, 0xf0, 0x07, 0x00,
   0x00, 0xf0, 0x0f, 0x00, 0xf0, 0xf9, 0x1f, 0x00, 0x04, 0xfa, 0x7f, 0x00,
   0x80, 0xf9, 0xff, 0x00, 0xc2, 0xfd, 0xff, 0x07, 0xc0, 0xf9, 0xff, 0x07,
   0xc0, 0xf9, 0xff, 0x07, 0xc2, 0xf1, 0xff, 0x07, 0x80, 0xe1, 0xff, 0x07,
   0x00, 0xf0, 0xff, 0x07, 0x02, 0xf0, 0xff, 0x1f, 0x04, 0xf8, 0xff, 0x1f,
   0xfa, 0xf9, 0xff, 0x0f, 0x04, 0xfa, 0xff, 0x0f, 0x02, 0xf8, 0xff, 0x07,
   0x60, 0xf0, 0xff, 0x07, 0xe2, 0x60, 0xff, 0x07, 0xf3, 0x40, 0xff, 0x07,
   0xf1, 0x00, 0xfe, 0x07, 0xf2, 0x00, 0xfe, 0x07, 0x01, 0x00, 0xf8, 0x07,
   0x01, 0x00, 0xc0, 0x07, 0x03, 0x00, 0x80, 0x07, 0x04, 0x00, 0x80, 0x07,
   0x0c, 0x00, 0x80, 0x07, 0xf0, 0x62, 0x80, 0x07, 0x02, 0x00, 0xc1, 0x03,
   0x06, 0x00, 0xc0, 0x03, 0x00, 0xf0, 0xc3, 0x03, 0x02, 0xf0, 0xc1, 0x03,
   0x02, 0x35, 0xc2, 0x03, 0x00, 0x75, 0xc1, 0x03, 0x04, 0xf5, 0x85, 0x01,
   0x08, 0xf5, 0x80, 0x01, 0x00, 0x65, 0x80, 0x01, 0x10, 0x05, 0x80, 0x00,
   0x10, 0x01, 0x06, 0x00, 0x00, 0x01, 0x0a, 0x00, 0x00, 0x01, 0x08, 0x00,
   0x10, 0x01, 0x18, 0x00, 0x24, 0x01, 0x18, 0x00, 0x04, 0x09, 0x18, 0x00,
   0x02, 0x80, 0x79, 0x00, 0x02, 0x80, 0xfb, 0x00, 0x00, 0x84, 0xe3, 0x00,
   0x02, 0x86, 0x01, 0x00, 0x00, 0x06, 0x00, 0x00, 0x32, 0x00, 0x06, 0x00,
   0x72, 0xc0, 0x81, 0x00, 0x74, 0x62, 0x52, 0x00, 0x86, 0xec, 0x19, 0x00,
   0x38, 0x84, 0x02, 0x00, 0x04, 0xd8, 0x03, 0x00, 0x00, 0x08, 0x01, 0x00,
   0x00, 0x70, 0x00, 0x00 

    
    
    
    };

  const uint8_t evep_bitmap[] U8G_PROGMEM ={
0x00, 0x00, 0x03, 0x00, 0x00, 0xe0, 0x07, 0x00, 0x00, 0xe0, 0x7f, 0x00,
   0x00, 0xe0, 0xfc, 0x01, 0x00, 0xe0, 0xfa, 0x02, 0x00, 0xe0, 0xfe, 0x06,
   0x00, 0xe0, 0xf5, 0x06, 0x00, 0xe0, 0xf1, 0x0e, 0x00, 0x60, 0xff, 0x1e,
   0x03, 0x60, 0xdf, 0x1f, 0x03, 0xf0, 0x1e, 0x02, 0x03, 0xfe, 0x1e, 0x00,
   0x87, 0x7f, 0x1e, 0x00, 0xcf, 0xff, 0x1e, 0x00, 0xef, 0xff, 0x1f, 0x00,
   0xfe, 0xff, 0x0f, 0x00, 0xfe, 0xff, 0x0f, 0x00, 0xfe, 0xff, 0x1f, 0x00,
   0xfc, 0xff, 0x1f, 0x00, 0xd8, 0xff, 0x3b, 0x00, 0x90, 0xff, 0x79, 0x00,
   0xa0, 0x7f, 0x78, 0x00, 0x60, 0x7f, 0x78, 0x00, 0x00, 0x3f, 0x78, 0x00,
   0xc0, 0x3f, 0x70, 0x00, 0x84, 0x3f, 0x70, 0x01, 0x04, 0x3f, 0x30, 0x01,
   0x84, 0x1f, 0x20, 0x01, 0x84, 0x1f, 0xa0, 0x01, 0xcc, 0x1f, 0xe0, 0x01,
   0xdc, 0x3f, 0xc0, 0x01, 0xfc, 0x3f, 0xc0, 0x03, 0xf8, 0x3f, 0x80, 0x03,
   0xf8, 0x3f, 0x80, 0x03, 0xf0, 0x3f, 0x00, 0x03, 0xf0, 0x3f, 0x00, 0x02,
   0xc0, 0x3f, 0x00, 0x00, 0xc0, 0x3f, 0x00, 0x00, 0xc0, 0x1f, 0x00, 0x00,
   0xe0, 0x3f, 0x00, 0x00, 0xe0, 0x7f, 0x00, 0x00, 0xe0, 0xef, 0x00, 0x00,
   0xe0, 0xef, 0x01, 0x00, 0xe0, 0xe7, 0x01, 0x00, 0xf2, 0xe7, 0x03, 0x00,
   0xf2, 0xc3, 0x07, 0x00, 0xfa, 0xc1, 0x07, 0x00, 0x7e, 0xc0, 0x07, 0x00,
   0x3e, 0x80, 0x07, 0x00, 0x3e, 0x80, 0x13, 0x00, 0x0e, 0x00, 0x13, 0x00,
   0x06, 0x00, 0x19, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x00, 0x00, 0x3e, 0x00,
   0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x60, 0x00,
   0x00, 0x00, 0x40, 0x00 

    
    };

    const uint8_t hamburguer_bitmap[] U8G_PROGMEM = {

  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x04, 0x00,
   0x80, 0x00, 0x00, 0xf0, 0x1b, 0x00, 0xe8, 0x21, 0x00, 0xc0, 0x05, 0x00,
   0xe4, 0x43, 0x00, 0xc4, 0x01, 0x00, 0xd0, 0x01, 0x00, 0xc0, 0x80, 0x00,
   0xd2, 0x82, 0x00, 0xc2, 0x80, 0x00, 0xc2, 0x80, 0x00, 0xc2, 0x81, 0x00,
   0xf2, 0xa1, 0x00, 0xe2, 0x81, 0x00, 0xe2, 0x81, 0x00, 0xe2, 0xc0, 0x00,
   0xf2, 0x80, 0x00, 0xe2, 0x80, 0x00, 0xe2, 0x01, 0x00, 0xe2, 0x01, 0x00,
   0xf2, 0x41, 0x00, 0xe0, 0x42, 0x00, 0xf0, 0x00, 0x00, 0xe0, 0x20, 0x00,
   0xc4, 0x17, 0x00, 0x58, 0x0d, 0x00, 0x40, 0x00, 0x00, 0x20, 0x02, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00 



   };   

const uint8_t metade_bitmap[] U8G_PROGMEM = {

  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x04, 0x00,
   0x80, 0x00, 0x00, 0xf0, 0x1b, 0x00, 0xe8, 0x21, 0x00, 0xc0, 0x05, 0x00,
   0xe4, 0x43, 0x00, 0xc4, 0x01, 0x00, 0xd0, 0x01, 0x00, 0xc0, 0x80, 0x00,
   0xd2, 0x82, 0x00, 0xc2, 0x80, 0x00, 0xc2, 0x80, 0x00, 0xc2, 0x81, 0x00,
   0xf2, 0xa1, 0x00, 0xe2, 0x81, 0x00, 0xe2, 0x81, 0x00 
 

   };   

const uint8_t comido_bitmap[] U8G_PROGMEM = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 


   };   








//fun√ßoes




void Comida(void){
   digitalWrite(32, HIGH);
     if(i==1){
       u8g.firstPage();  
  do {
     u8g.drawXBMP( 60, 16, 17, 35, hamburguer_bitmap);
      u8g.drawXBMP( 0, 3, 29, 58, charmanderp_bitmap);
  } while( u8g.nextPage() );
    delay(2000);
    
  u8g.firstPage();  

  do {
     u8g.drawXBMP( 60, 31, 17, 19, metade_bitmap);
      u8g.drawXBMP( 0, 3, 29, 58, charmanderp_bitmap);
  } while( u8g.nextPage() );
    delay(1000);

   u8g.firstPage();  

  do {
     u8g.drawXBMP( 60, 31, 17, 19, comido_bitmap);
      u8g.drawXBMP( 0, 3, 29, 58, charmanderp_bitmap);
  } while( u8g.nextPage() );
  delay(1000);
      
          }else if(i==2){
                              u8g.firstPage();  
                  do {
                     u8g.drawXBMP( 60, 16, 17, 35, hamburguer_bitmap);
                       u8g.drawXBMP( 0, 3, 29, 58, bubassaurop_bitmap);
                  } while( u8g.nextPage() );
                    delay(800);
                    
                  u8g.firstPage();  
                
                  do {
                     u8g.drawXBMP( 60, 31, 17, 19, metade_bitmap);
                     u8g.drawXBMP( 0, 3, 29, 58, bubassaurop_bitmap);
                  } while( u8g.nextPage() );
                    delay(700);
                
                   u8g.firstPage();  
                
                  do {
                     u8g.drawXBMP( 60, 31, 17, 19, comido_bitmap);
                      u8g.drawXBMP( 0, 3, 29, 58, bubassaurop_bitmap);
                  } while( u8g.nextPage() );
                  delay(600);
                                                
          }else if(i==3){
                                u8g.firstPage();  
                  do {
                     u8g.drawXBMP( 60, 16, 17, 35, hamburguer_bitmap);
                       u8g.drawXBMP(0, 3, 29, 58, evep_bitmap);
                  } while( u8g.nextPage() );
                    delay(800);
                    
                  u8g.firstPage();  
                
                  do {
                     u8g.drawXBMP( 60, 31, 17, 19, metade_bitmap);
                      u8g.drawXBMP(0, 3, 29, 58, evep_bitmap);
                  } while( u8g.nextPage() );
                    delay(700);
                
                   u8g.firstPage();  
                
                  do {
                     u8g.drawXBMP( 60, 31, 17, 19, comido_bitmap);
                      u8g.drawXBMP(0, 3, 29, 58, evep_bitmap);
                  } while( u8g.nextPage() );
                  delay(600);
          }
  tempo1= millis();

}

void Dormir(void){
   digitalWrite(33, HIGH);
        if(i==1){
                       u8g.firstPage();  
                do {
                    u8g.drawBox(0,0,128,64);
                    u8g.setColorIndex(0);
                    u8g.drawXBMP( 0, 3, 29, 58, charmanderp_bitmap);
                   u8g.setColorIndex(1);
                     
                } while( u8g.nextPage() );
                             
                    
      
          }else if(i==2){
                        u8g.firstPage();  
                  do {
                      u8g.drawBox(0,0,128,64);
                      u8g.setColorIndex(0);
                      u8g.drawXBMP( 0, 3, 29, 58, bubassaurop_bitmap);
                      u8g.setColorIndex(1);
                  } while( u8g.nextPage() );
                                
          }else if(i==3){
                         u8g.firstPage();  
                do {
                      u8g.drawBox(0,0,128,64);
                      u8g.setColorIndex(0);
                    u8g.drawXBMP(0, 3, 29, 58, evep_bitmap);
                      u8g.setColorIndex(1);
                } while( u8g.nextPage() );
                
                            
          }
           
 
              
          
  delay(10000);
  tempo1= millis();
          return; 
}
void Brincar(){
  int i = 120, a = 120, c = 120, d = 120;
  int  aleatorio1, aleatorio2, aleatorio3,aleatorio4, movimento=40, esquerda,direita;

      digitalWrite(2,HIGH);
      
      digitalWrite(4,HIGH);
      digitalWrite(34,HIGH);
     
 

  while(1){
    
    
    srand(time(NULL));
    aleatorio1 = (rand() % 55) +1;
    aleatorio2 = (rand() % 55) +1;
    aleatorio3 = (rand() % 55) +1;
    aleatorio4 = (rand() % 48) +1;
   
//    musica(joguinho1);
    
    
    
    u8g.firstPage(); 
    delay(400); 
    do {
        u8g.drawXBMP( i, aleatorio1, 8, 9, asteroide1_bitmap);
      
        u8g.drawXBMP( a, aleatorio2, 8, 9, asteroide2_bitmap);
     
        u8g.drawXBMP( d, aleatorio3, 8, 9, asteroide3_bitmap);
        
        u8g.drawXBMP( c, aleatorio4, 8, 9, asteroide4_bitmap);
        
        u8g.drawXBMP( 0 , movimento, 10, 16, nave_bitmap);

        
       
  
    } while( u8g.nextPage() );
      delay(400);
    do {
        u8g.drawXBMP( i, aleatorio1, 8, 9, asteroide1_bitmap);
      
        u8g.drawXBMP( a, aleatorio2, 8, 9, asteroide2_bitmap);
     
        u8g.drawXBMP( d, aleatorio3, 8, 9, asteroide3_bitmap);
        
        u8g.drawXBMP( c, aleatorio4, 8, 9, asteroide4_bitmap);
        
        u8g.drawXBMP( 0 , movimento, 10, 16, nave_bitmap);

        
       
  
    } while( u8g.nextPage() );
    
      

       
    
    
    esquerda = digitalRead(2);
    direita = digitalRead(4);
    if (esquerda==0){
    movimento= movimento + 16;
    if(movimento>=64){
      movimento==0;
      }
      
    }
    
  
    if (direita==0){
    movimento= movimento - 16;
    if(movimento<=0){
      movimento=48;
      }
      
    }
    
      if( (((aleatorio1>=movimento) && (aleatorio1  <= movimento +16)) &&  (i<=9) && (i>=0)) 
          || (((aleatorio2>=movimento) && (aleatorio2  <= movimento +16)) && (a<=9) && (a>=0))
          || (((aleatorio3>=movimento) && (aleatorio3  <= movimento +16)) && (d<=9) && (d>=0))
          || (((aleatorio4>=movimento) && (aleatorio4  <= movimento +16)) && (c<=9) && (c>=0)))
          {
            
             u8g.firstPage(); 

             do{
              u8g.setFont(u8g_font_helvB08);
              u8g.drawStr(28, 0, "GAME OVER"); 
              delay(3000);

              
              
              
              return;
              }while(u8g.nextPage());
              
        }
                 
//      musica(joguinho5);
      
            
       
 
      i = i - 15 ;
      a = a - 8;
      c = c - 7;
      d = d - 12;

 
  }
  return;
}



void disp_graph_init()
{
  if ( u8g.getMode() == U8G_MODE_R3G3B2 ) {
    u8g.setColorIndex(255);     //branco
  }
  else if ( u8g.getMode() == U8G_MODE_GRAY2BIT ) {
    u8g.setColorIndex(3);         //m√°xima intensidade
  }
  else if ( u8g.getMode() == U8G_MODE_BW ) {
    u8g.setColorIndex(1);         // pixel on
  }
  else if ( u8g.getMode() == U8G_MODE_HICOLOR ) {
    u8g.setHiColorByRGB(255,255,255);
  }

}


void setup(void)
{
      disp_graph_init();
    
      //botoes
      pinMode(2, OUTPUT);
      pinMode(3, OUTPUT);
      pinMode(4, OUTPUT);
      digitalWrite(2,HIGH);
      digitalWrite(3,HIGH);
      digitalWrite(4,HIGH);
      //musicas
      pinMode(30, OUTPUT);
      pinMode(31, OUTPUT);
      pinMode(32, OUTPUT);
      pinMode(33, OUTPUT);
      pinMode(34, OUTPUT);
      Serial.begin(9600);

}



void loop(void)
{


  tempo1=millis();
  
  
//escolha do peronagem
digitalWrite(30, HIGH);
     digitalWrite(2,HIGH);
      digitalWrite(3,HIGH);
      digitalWrite(4,HIGH);
 u8g.firstPage();  
    do {
          
        u8g.drawXBMP( 0, 3, 29, 58, charmanderp_bitmap);

        u8g.drawXBMP( 50, 3, 29, 58, bubassaurop_bitmap);

        u8g.drawXBMP(99, 3, 29, 58, evep_bitmap);


       
    } while( u8g.nextPage() );
  bt1 = digitalRead(2);
  bt2 = digitalRead(3);
  bt3 = digitalRead(4);
  
  if(bt1==0){
    i=1;
    j=1;

  }else if(bt2==0){
    i=2;
    j=1;

  }else if(bt3==0){
    i=3;
    j=1;
  }

//despois da escolha do personagem

while(j){
tempo2=millis();
Serial.print(tempo2);
      digitalWrite(30, LOW);
        comida = digitalRead(2);
        dormir = digitalRead(3);
        brincar = digitalRead(4);
        
      digitalWrite(31, HIGH);
          if(i==1){
                     {
            
              u8g.firstPage();  
              do {
                 u8g.drawXBMP( 20, 4, 29, 58, charmander_bitmap);
                 
                 u8g.drawXBMP( 120, 4, 6, 12, bateriacheia_bitmap);

                 if(tempo2-tempo1==1000){
               
              do {
                u8g.drawXBMP( 20, 4, 29, 58, charmander_bitmap);
                 u8g.drawXBMP( 120, 4, 6, 12, bateriamenos1_bitmap);
                  
              } while( u8g.nextPage() );
      }else if(tempo2-tempo1==5000){
      
              do {
                 u8g.drawXBMP( 120, 4, 6, 12, bateriamenos3_bitmap);
                  
              } while( u8g.nextPage() );
      }else if(tempo2-tempo1==100000){
      
        do {
          u8g.drawXBMP( 120, 4, 6, 12, bateriadescarregada_bitmap);
                  
        } while( u8g.nextPage() );
        break;
      }
                 
                  
              } while( u8g.nextPage() );
                 delay(550);
                 
                 u8g.firstPage();
        
              do {
                 u8g.drawXBMP( 20, 4, 29, 58, charmanderVirada_bitmap);
                 u8g.drawXBMP( 120, 4, 6, 12, bateriacheia_bitmap);

                 if(tempo2-tempo1==10000){
       
              do {
                 u8g.drawXBMP( 120, 4, 6, 12, bateriamenos1_bitmap);
                  
              } while( u8g.nextPage() );
      }else if(tempo2-tempo1==50000){
        u8g.firstPage();        do {
                 u8g.drawXBMP( 120, 4, 6, 12, bateriamenos3_bitmap);
                  
              } while( u8g.nextPage() );
      }else if(tempo2-tempo1==100000){
          
        do {
          u8g.drawXBMP( 120, 4, 6, 12, bateriadescarregada_bitmap);
                  
        } while( u8g.nextPage() );
        break;
      }
                  
              } while( u8g.nextPage() ); 
                delay(550);
               
            }
      
     
      
          }
      
          if(i==2){

                        u8g.firstPage();  
              do {
                 u8g.drawXBMP( 20, 4, 29, 58, bubassauro_bitmap);
                 u8g.drawXBMP( 120, 4, 6, 12, bateriacheia_bitmap);
                  
              } while( u8g.nextPage() );
                 delay(550);
//               musica(inicio1);
                 u8g.firstPage();  
              do {
                 u8g.drawXBMP( 20, 4, 29, 58,bubassauroVirada_bitmap);
                 u8g.drawXBMP( 120, 4, 6, 12, bateriacheia_bitmap);
                  
              } while( u8g.nextPage() ); 
                delay(550);
                  
          }
      
          if(i==3){
                
       
                    u8g.firstPage();  
                do {
                   u8g.drawXBMP( 20, 4, 29, 58, eve_bitmap);
                   u8g.drawXBMP( 120, 4, 6, 12, bateriacheia_bitmap);
                    
                } while( u8g.nextPage() );
                   delay(550);
//                   musica(inicio1);
                   u8g.firstPage();  
                do {
                   u8g.drawXBMP( 20, 4, 29, 58, eveVirada_bitmap);
                   u8g.drawXBMP( 120, 4, 6, 12, bateriacheia_bitmap);
                    
                } while( u8g.nextPage() ); 
                  delay(550);
                    
          }
      
      //descrecismento das barrinhas
      
  
      if(tempo2-tempo1==10000){
        u8g.firstPage();  
              do {
                 u8g.drawXBMP( 120, 4, 6, 12, bateriamenos1_bitmap);
                  
              } while( u8g.nextPage() );
      }else if(tempo2-tempo1==50000){
        u8g.firstPage();  
              do {
                 u8g.drawXBMP( 120, 4, 6, 12, bateriamenos3_bitmap);
                  
              } while( u8g.nextPage() );
      }else if(tempo2-tempo1==100000){
        u8g.firstPage();  
        do {
          u8g.drawXBMP( 120, 4, 6, 12, bateriadescarregada_bitmap);
                  
        } while( u8g.nextPage() );
        break;
      }
  
      
  //parte de sele√ßao dos botoes  
       comida = digitalRead(2);
        dormir = digitalRead(3);
        brincar = digitalRead(4); 
          if(comida==0){
          digitalWrite(31, LOW);
            Comida();
            digitalWrite(32, LOW);
          }
      
          if(dormir==0){
            digitalWrite(31, LOW);
            Dormir();
            digitalWrite(33, LOW);
          }
          if(brincar==0){
           digitalWrite(31, LOW);
            Brincar();
            u8g.firstPage(); 
            do{
              u8g.setFont(u8g_font_helvB08);
              u8g.drawBox(0, 31, 96, 13);
              u8g.setColorIndex(0);
              u8g.drawStr(0, 40, "Game Over");
              u8g.setColorIndex(1);
              delay(500);
            
              }while(u8g.nextPage());
              delay(1000);
            
            digitalWrite(34, LOW);
          }
      
        
      }   
}  
